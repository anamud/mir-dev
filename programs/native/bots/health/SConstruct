import os
app_name = os.getcwd().split(os.sep)[-1]
print('This is a SPECIALIZED BUILD. \n')

######################
# Common environment #
######################

import os
import sys

if(os.path.isfile('NOT_SUPPORTED')):
    print('NOT_SUPPORTED file present. Aborting!')
    Exit(2)

MIR_ROOT = os.environ.get('MIR_ROOT')
if(MIR_ROOT == None):
    print('MIR_ROOT is not defined. Aborting!')
    Exit(2)

sys.path.append(MIR_ROOT + '/scripts')
import mir_utils

if os.path.isfile(MIR_ROOT+'/src/HAVE_PAPI'):
    PAPI_ROOT = os.environ.get('PAPI_ROOT')
    if(PAPI_ROOT == None):
        print('PAPI_ROOT is not defined. Aborting!')
        Exit(2)

compilers = ['gcc','icc']
compiler = ''
for item in compilers:
    compiler = mir_utils.which(item)
    if(len(compiler) > 0):
        break;
if(len(compiler) == 0):
    print('Could not find a compiler. Aborting!')
    Exit(2)

env = Environment()
env['CC'] = [compiler[0]]
env['CCFLAGS'] = Split("""
-std=c99
-Wall 
-Werror 
-Wno-unused-function 
-Wno-unused-variable
-Wno-unused-but-set-variable
""")
env['CCFLAGS'] += ['-I' + MIR_ROOT+'/src']
env['CCFLAGS'] += ['-I' + MIR_ROOT+'/programs/common']
env['LINKFLAGS'] = ['-pthread']
env['LIBS'] = Split("""
m
""")

env['LIBPATH'] = [MIR_ROOT + '/src']

if os.path.isfile(MIR_ROOT+'/src/HAVE_LIBNUMA'):
    env['LIBS'] += ['numa']
    env['CCFLAGS'] += ['-DMIR_MEM_POL_ENABLE']

if os.path.isfile(MIR_ROOT+'/src/HAVE_PAPI'):
    env['LIBS'] += ['papi']
    env['LIBPATH'] += [PAPI_ROOT + '/lib']

#####################
# Debug environment #
#####################
#-fdump-tree-optimized

debug = env.Clone();
debug['CCFLAGS'] += Split("""
-O0
-g
-ggdb
-DALLOW_DEBUG_MESSAGES
""")
debug.Prepend(LIBS = ['mir-debug'])
debug.VariantDir('debug-build', '.', duplicate=0)
debug_src = debug.Glob('debug-build/*.c')
debug.Program(app_name +'-debug', source = debug_src)
Clean('.','debug-build')

###################
# Opt environment #
###################

#-vec-
#-axsse4.2
#-opt-prefetch
#-vec-report
#-opt-report3
#-opt-report-phase hlo
#-O3
opt = env.Clone();
opt['CCFLAGS'] += Split("""
-O3
""")
opt.Prepend(LIBS = ['mir-opt'])
opt.VariantDir('opt-build', '.', duplicate=0)
opt_src = opt.Glob('opt-build/*.c')
opt.Program(app_name +'-opt', source = opt_src)
Clean('.','opt-build')

#################################
# Profile environment #
#################################

prof = env.Clone();
prof['CC'] = 'gcc'
prof['CCFLAGS'] += Split("""
-O1
-DNDEBUG
-fno-inline-functions
-fno-inline-functions-called-once
-fno-optimize-sibling-calls
-fno-omit-frame-pointer
-g
""")
prof.Prepend(LIBS = ['mir-opt'])
prof.VariantDir('prof-build', '.', duplicate=0)
prof_src = prof.Glob('prof-build/*.c')
prof.Program(app_name +'-prof', source = prof_src)
Clean('.','prof-build')

#######################
# Verbose environment #
#######################

verbose = env.Clone();
verbose['CCFLAGS'] += Split("""
-O3
-DALLOW_MESSAGES
-DCHECK_RESULT
""")
verbose.Prepend(LIBS = ['mir-opt'])
verbose.VariantDir('verbose-build', '.', duplicate=0)
verbose_src = verbose.Glob('verbose-build/*.c')
verbose.Program(app_name +'-verbose', source = verbose_src)
Clean('.','verbose-build')
