join_color <- "#FF7F50"  # coral
fork_color <- "#2E8B57"  # seagreen
start_color <- "#DEB887" # burlywood
create_edge_color <- fork_color
sync_edge_color <- join_color
}
scope_edge_color <-"black"
cont_edge_color <- "black"
toc("Setting colors")
tic(type="elapsed")
# Increment join node pass counts
# The pass count starts at 0
# tg.data$joins_at_plus_one <- tg.data$joins_at + 1
# Create join node list
# join_nodes <- mapply(function(x, y, z) {paste('j', x, y, sep='.')}, x=tg.data$parent, y=tg.data$joins_at_plus_one)
# join_nodes_unique <- unique(unlist(join_nodes, use.names=FALSE))
# Create parent nodes list
parent_nodes_unique <- unique(tg.data$parent)
# Create fork nodes list
fork_nodes <- mapply(function(x, y, z) {paste('f', x, y, sep='.')}, x=tg.data$parent, y=tg.data$joins_at)
fork_nodes_unique <- unique(unlist(fork_nodes, use.names=FALSE))
toc("Node list creation")
# Create graph
tic(type="elapsed")
tg <- graph.empty(directed=TRUE) + vertices('E',
unique(c(#join_nodes_unique,
fork_nodes_unique,
parent_nodes_unique,
tg.data$task)))
toc("Graph creation")
tic(type="elapsed")
# Connect parent fork to task node
tg[from=fork_nodes, to=tg.data$task, attr='kind'] <- 'create'
tg[from=fork_nodes, to=tg.data$task, attr='color'] <- create_edge_color
toc("Connect parent fork to task node")
# tic(type="elapsed")
# # Connect parent fork to parent join node
# tg[from=fork_nodes, to=join_nodes, attr='kind'] <- 'continue'
# tg[from=fork_nodes, to=join_nodes, attr='color'] <- cont_edge_color
# toc("Connect parent fork to parent join node")
tic(type="elapsed")
first_forks_index <- which(grepl("f.[0-9]+.0$", fork_nodes_unique))
parent_first_forks <- as.vector(sapply(fork_nodes_unique[first_forks_index], function(x) {gsub('f.(.*)\\.+.*','\\1', x)}))
first_forks <- fork_nodes_unique[first_forks_index]
tg[to=first_forks, from=parent_first_forks, attr='kind'] <- 'scope'
tg[to=first_forks, from=parent_first_forks, attr='color'] <- scope_edge_color
toc("Connect parent to first fork")
tic(type="elapsed")
# Connect fork to next fork
#Rprof("profile-forktonext.out")
find_next_fork <- function(node)
{
#print(paste('Processing node',node, sep=" "))
# Get node info
node_split <- unlist(strsplit(node, "\\."))
parent <- as.numeric(node_split[2])
join_count <- as.numeric(node_split[3])
# Find next work
next_fork <- paste('f', as.character(parent), as.character(join_count+1), sep=".")
if(is.na(match(next_fork, fork_nodes_unique)) == F)
{
# Connect to next fork
next_fork <- next_fork
}
else
{
# Connect to myself (self-loop)
next_fork <- node
}
next_fork
}
next_forks <- as.vector(sapply(fork_nodes_unique, find_next_fork))
tg[from=join_nodes_unique, to=next_forks, attr='kind'] <- 'continue'
tg[from=join_nodes_unique, to=next_forks, attr='color'] <- cont_edge_color
#Rprof(NULL)
toc("Connect join to next fork")
tg[from=fork_nodes_unique, to=next_forks, attr='kind'] <- 'continue'
tg[from=fork_nodes_unique, to=next_forks, attr='color'] <- cont_edge_color
toc("Connect join to next fork")
tkplot(tg)
# Connext E to last join of task 0
tic(type="elapsed")
get_join_count <- function(node)
{
# Get node info
node_split <- unlist(strsplit(node, "\\."))
parent <- as.numeric(node_split[2])
join_count <- as.numeric(node_split[3])
join_count
}
fork_nodes_of_zero <- fork_nodes_unique[which(grepl("f.0.[0-9]+$", fork_nodes_unique))]
largest_join_count_of_zero <- max(as.vector(sapply(fork_nodes_of_zero, get_join_count)))
tg[from=paste("f.0.",largest_join_count_of_zero,sep=""), to='E', attr='kind'] <- 'continue'
tg[from=paste("f.0.",largest_join_count_of_zero,sep=""), to='E', attr='color'] <- cont_edge_color
toc("Connect last join to node E")
tic(type="elapsed")
tg <- simplify(tg, remove.multiple=T, remove.loops=T)
toc("Simplify")
tkplot(tg)
setwd("~/mir-dev/test/fib")
tg <- simplify(tg, remove.multiple=T, remove.loops=T
)
install.packages("data.table")
paste("id", event_names)
# Clean slate
rm(list=ls())
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id","name")], dat_more_proper)
# Clean slate
rm(list=ls())
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id","name")], dat_more_proper)
# Clean slate
rm(list=ls())
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id","name")], dat_more_proper)
# Clean slate
rm(list=ls())
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
library(reshape2)
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id","name")], dat_more_proper)
# Clean slate
rm(list=ls())
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
library(reshape2)
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
head(dat_most_proper)
colnames(dat_most_proper)
c("id", event_names)
# Clean slate
rm(list=ls())
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
library(reshape2)
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
colnames(dat_most_proper) <- c("id", event_names)
head(dat_most_proper)
?setkey
??setkey
# Summarize
library(data.table)
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dt[,list(mean=mean(age),sd=sd(age)),by=id]
dt[,list(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
head(dt)
dat_table[,list(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
str(dat_most_proper)
str(dat_most_proper$PAPI_TOT_INS)
as.numeric(levels(dat_most_proper))[]
as.numeric(levels(dat_most_proper$PAPI_TOT_INS))[dat_most_proper$PAPI_TOT_INS]
head(dat_most_proper)
apply(dat_most_proper, 2, function(x) as.numeric(levels(x))[x])
sapply(dat_most_proper, 2, function(x) as.numeric(levels(x))[x])
apply(dat_most_proper, 2, function(x) as.numeric(levels(x))[x])
apply(dat_most_proper, 2, function(x) print x)
apply(dat_most_proper, 2, function(x) print(x))
apply(dat_most_proper[,c(event_names)], 2, function(x) as.numeric(levels(x))[x])
as.numeric(levels(dat_most_proper$PAPI_TOT_INS))[dat_most_proper$PAPI_TOT_INS]
as.numeric(levels(dat_most_proper[,event_names]))[dat_most_proper[,event_names]]
as.numeric(levels(dat_most_proper[,event_names[-1]]))[dat_most_proper[,event_names[-1]]]
as.numeric(levels(dat_most_proper[,event_names[1]]))[dat_most_proper[,event_names[1]]]
apply(dat_most_proper[,event_names], 2, function(x) as.numeric(levels(x))[x])
apply(dat_most_proper[,event_names], 2, function(x) str(x))
apply(dat_most_proper[,event_names], 2, function(x) x
)
apply(dat_most_proper[,event_names], 2, function(x) as.numeric(as.character(x)))
apply(dat_most_proper, 2, function(x) as.numeric(as.character(x)))
# Make proper
# Split columns
library(reshape2)
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
colnames(dat_most_proper) <- c("id", event_names)
dat_most_proper <- as.data.frame(apply(dat_most_proper, 2, function(x) as.numeric(as.character(x))))
str(dat_most_proper)
# Summarize
library(data.table)
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table[,list(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
dat_table[,list(mean(PAPI_TOT_CYC),sd(PAPI_TOT_CYC)),by=id]
dat_table[,list(cat(=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
apply(dat_table, 2, function(x) dat_table[,list(paste(name(x),".mean")=mean(x),paste(name(x),"sd")=sd(x)),by=id])
paste(name(dat_table$id),"blah")
names(dat_table$id)
colnames(dat_table$id)
colnames(dat_table$id)
paste(name(dat_table$id),"blah")
apply(dat_table, 2, function(x) dat_table[,list(mean(x),sd(x)),by=id])
apply(dat_table, 2, function(x) dat_table[,list(mean=mean(x),sd=sd(x),sum=sum(x)),by=id])
dat_table
mean(4453,1104)
apply(dat_table, 2, function(x) dat_table[,list(mean=mean(x),sd=sd(x),sum=sum(x)),by=id])
dat_table[,list(cat(=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
dat_table[,list(cat(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
dat_table[,list(cat(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
dat_table[,list(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC)),by=id]
dat_table[,list(mean=mean(PAPI_TOT_CYC),sd=sd(PAPI_TOT_CYC),sum=sum(PAPI_TOT_CYC)),by=id]
?[.data.table]
?data.table
dat_table[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=event_names]
dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
dat_table[, lapply(.SD, c(sum,mean,sd), na.rm=TRUE), by=id, .SDcols=event_names]
dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
dat_table[, lapply(.SD, function(x) {sum(x);mean(x);}, na.rm=TRUE), by=id, .SDcols=event_names]
dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
?paste
cat("blah", event_names)
paste("blah", event_names)
# Summarize by id
library(data.table)
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
colnames(dat_table) <- c("id", paste(".mean", sep="", event_names))
?setnames
# Summarize by id
library(data.table)
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table, c("id", paste(".mean", sep="", event_names))
)
dat_table_sd
c("id", paste(".mean", sep="", event_names)
)
paste
?paste
c("id", paste(event_names, sep="", ".mean")
)
library(data.table)
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table, c("id", paste(event_names,sep="",".sd")))
dat_table_mean <- dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table, c("id", paste(event_names,sep="",".mean")))
dat_table_sum <- dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table, c("id", paste(event_names,sep="",".sum")))
# Summarize by id
library(data.table)
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sd, c("id", paste(event_names,sep="",".sd")))
dat_table_mean <- dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_mean, c("id", paste(event_names,sep="",".mean")))
dat_table_sum <- dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sum, c("id", paste(event_names,sep="",".sum")))
head(dat_table_mean)
head(dat_table_sum)
head(dat_table_id)
merge(dat_table_mean, dat_table_sd, dat_table_sum, by="id")
merge(dat_table_mean, dat_table_sd)
merge(dat_table_mean, dat_table_sd, by="id")
# Clean slate
rm(list=ls())
# Libraries
require(reshape2, quietly=T)
require(data.table, quietly=T)
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
colnames(dat_raw) <- c("type","number","instant","count","value","meta")
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
colnames(dat_most_proper) <- c("id", event_names)
dat_most_proper <- as.data.frame(apply(dat_most_proper, 2, function(x) as.numeric(as.character(x))))
# Summarize by id
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sd, c("id", paste(event_names,sep="",".sd")))
dat_table_mean <- dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_mean, c("id", paste(event_names,sep="",".mean")))
dat_table_sum <- dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sum, c("id", paste(event_names,sep="",".sum")))
dat_table_merged <- merge(dat_table_sd, dat_table_mean, by="id")
dat_table_merged <- merge(dat_table_merged, dat_table_sum, by="id")
# Write out
warnings()
# Clean slate
rm(list=ls())
# Libraries
require(reshape2, quietly=T)
require(data.table, quietly=T)
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
setnames(dat_raw, c("type","number","instant","count","value","meta"))
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
setnames(dat_most_proper,c("id", event_names))
dat_most_proper <- as.data.frame(apply(dat_most_proper, 2, function(x) as.numeric(as.character(x))))
# Summarize by id
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sd, c("id", paste(event_names,sep="",".sd")))
dat_table_mean <- dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_mean, c("id", paste(event_names,sep="",".mean")))
dat_table_sum <- dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sum, c("id", paste(event_names,sep="",".sum")))
dat_table_merged <- merge(dat_table_sd, dat_table_mean, by="id")
dat_table_merged <- merge(dat_table_merged, dat_table_sum, by="id")
# Write out
# Warn
warnings()
warn=2
# Clean slate
rm(list=ls())
# Libraries
require(reshape2, quietly=T)
require(data.table, quietly=T)
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
setnames(dat_raw, c("type","number","instant","count","value","meta"))
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
setnames(dat_most_proper,c("id", event_names))
dat_most_proper <- as.data.frame(apply(dat_most_proper, 2, function(x) as.numeric(as.character(x))))
# Summarize by id
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sd, c("id", paste(event_names,sep="",".sd")))
dat_table_mean <- dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_mean, c("id", paste(event_names,sep="",".mean")))
dat_table_sum <- dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sum, c("id", paste(event_names,sep="",".sum")))
dat_table_merged <- merge(dat_table_sd, dat_table_mean, by="id")
dat_table_merged <- merge(dat_table_merged, dat_table_sum, by="id")
# Write out
# Warn
warnings()
?warnings
# Libraries
require(reshape2, quietly=T)
require(data.table, quietly=T)
# Read events and subset
dat_raw <- read.csv('58997818208834-events-acc.rec', sep=':', na.strings=c(""))
dat_raw <- dat_raw[complete.cases(dat_raw),]
setnames(dat_raw, c("type","number","instant","count","value","meta"))
num_events <- dat_raw[1,]$count
dat_int <- subset(dat_raw, select=c(value, meta))
# Get events and meta data field names
event_names <- character()
events_1 <- strsplit(as.character(dat_raw[1,]$value), ",")[[1]]
for(event_str in events_1)
event_names <- append(event_names, strsplit(event_str, "=")[[1]][1])
# Make proper
# Split columns
dat_proper <- with(dat_int, cbind(colsplit(dat_int$meta, pattern = ",", names=c("id","name")), colsplit(dat_int$value, pattern = "\\,", names=event_names)))
# Remove "EVENT=" and trailing comma from each event
dat_more_proper <- as.data.frame(apply(dat_proper[,event_names], 2, function(x) gsub("[[:alpha:]]+|[[:punct:]]+","",x)))
# Add id and name
dat_most_proper <- data.frame(dat_proper[,c("id")], dat_more_proper)
setnames(dat_most_proper,c("id", event_names))
dat_most_proper <- as.data.frame(apply(dat_most_proper, 2, function(x) as.numeric(as.character(x))))
# Summarize by id
dat_table <- data.table(dat_most_proper)
setkey(dat_table, id)
dat_table_sd <- dat_table[, lapply(.SD, sd, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sd, c("id", paste(event_names,sep="",".sd")))
dat_table_mean <- dat_table[, lapply(.SD, mean, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_mean, c("id", paste(event_names,sep="",".mean")))
dat_table_sum <- dat_table[, lapply(.SD, sum, na.rm=TRUE), by=id, .SDcols=event_names]
setnames(dat_table_sum, c("id", paste(event_names,sep="",".sum")))
dat_table_merged <- merge(dat_table_sd, dat_table_mean, by="id")
dat_table_merged <- merge(dat_table_merged, dat_table_sum, by="id")
# Write out
# Warn
warnings()
?merge
