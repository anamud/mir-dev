
/* DO NOT EDIT! THIS FILE IS AUTOGENERATED. */
#ifndef MIR_LIB_INT_H
#define MIR_LIB_INT_H

#include "mir_types.h"
#include "mir_omp_int.h"

/*LIBINT_INC_BEGIN*/
// Uncomment this to use sync mutex on the tilepro64
//#define TILEPRO_USE_SYNCMUTEX
#ifdef __tile__
#ifdef TILEPRO_USE_SYNCMUTEX
#include <tmc/sync.h>
#define MIR_LOCK_INITIALIZER TMC_SYNC_MUTEX_INIT
#else
#include <tmc/spin.h>
#define MIR_LOCK_INITIALIZER TMC_SPIN_MUTEX_INIT
#endif
#else
#include <pthread.h>
#define MIR_LOCK_INITIALIZER PTHREAD_MUTEX_INITIALIZER
#endif
/*LIBINT_INC_END*/

BEGIN_C_DECLS 

/*LIBINT_DECL_BEGIN*/
struct mir_lock_t
{/*{{{*/
#ifdef __tile__
    //tmc_sync_mutex_t m;
    tmc_spin_mutex_t m;
#else
    pthread_mutex_t m;
#endif
};/*}}}*/
/*LIBINT_DECL_END*/
/*LIBINT_DECL_BEGIN*/
enum mir_data_access_t 
{
    MIR_DATA_ACCESS_READ = 0,
    MIR_DATA_ACCESS_WRITE,
    MIR_DATA_ACCESS_NUM_TYPES
};
typedef enum mir_data_access_t mir_data_access_t;

struct mir_data_footprint_t
{
    void* base;
    size_t type;
    uint64_t start;
    uint64_t end;
    uint64_t row_sz; // FIXME: This restricts footprints to square blocks
    mir_data_access_t data_access;
    void* part_of;
};
/*LIBINT_DECL_END*/
/*LIBINT_BEGIN*/
void mir_lock_create(struct mir_lock_t* lock);

void mir_lock_destroy(struct mir_lock_t* lock);

void mir_lock_set(struct mir_lock_t* lock);

void mir_lock_unset(struct mir_lock_t* lock);

int mir_lock_tryset(struct mir_lock_t* lock);
/*LIBINT_END*/
/*LIBINT*/ typedef void* (*mir_tfunc_t)(void*);
/*LIBINT*/ void mir_task_create(mir_tfunc_t tfunc, void* data, size_t data_size, unsigned int num_data_footprints, struct mir_data_footprint_t* data_footprints, const char* name);
/*LIBINT*/ void mir_task_create_on(mir_tfunc_t tfunc, void* data, size_t data_size, unsigned int num_data_footprints, struct mir_data_footprint_t* data_footprints, const char* name, unsigned int target);
/*LIBINT*/ void mir_task_wait();
/*LIBINT*/ void mir_create();
/*LIBINT*/ void mir_destroy();
/*LIBINT*/ void* mir_mem_pol_allocate (size_t sz);
/*LIBINT*/ void mir_mem_pol_release (void* addr, size_t sz);
/*LIBINT*/ int mir_get_num_threads();
/*LIBINT*/ int mir_get_threadid();
/*LIBINT*/ void mir_sleep_ms(uint32_t msec);
/*LIBINT*/ void mir_sleep_us(uint32_t usec);
/*LIBINT*/ uint64_t mir_get_cycles();

END_C_DECLS 


#endif

