######################
# Common environment #
######################

import os
import sys

MIR_ROOT = os.environ.get('MIR_ROOT')
if(MIR_ROOT == None):
    print('MIR_ROOT is not defined. Aborting!')
    Exit(2)

sys.path.append(MIR_ROOT + '/scripts')
import mir_utils

if os.path.isfile('HAVE_PAPI'):
    PAPI_ROOT = os.environ.get('PAPI_ROOT')
    if(PAPI_ROOT == None):
        print('PAPI_ROOT is not defined. Aborting!')
        Exit(2)

compilers = ['gcc','icc']
compiler = ''
for item in compilers:
    compiler = mir_utils.which(item)
    if(len(compiler) > 0):
        break;
if(len(compiler) == 0):
    print('Could not find a compiler. Aborting!')
    Exit(2)

if not os.path.isfile('arch/mir_arch_this.c'):
    print('Generating generic architecture description ...')
    if(0 != os.system(MIR_ROOT+'/scripts/generate_arch.py arch')):
        print('Could not generate generic architecture description. Build cannot continue!')
        Exit(2)

if not os.path.isfile('mir_lib_int.h'):
    print('Generating library interface ...')
    if(0 != os.system(MIR_ROOT+'/src/generate_lib_int.sh')):
        print('Could not generate library interface. Build cannot continue!')
        Exit(2)

env = Environment()
env['CC'] = [compiler[0]]
env['CCFLAGS'] = Split("""
-Wall 
-Werror 
-Wno-unused-function 
-Wno-unused-variable 
-Wno-unused-label
-fPIC 
-std=c99 
-D_GNU_SOURCE 
""")

env['CCFLAGS'] += ['-I' + MIR_ROOT+'/src']

if os.path.isfile('HAVE_LIBNUMA'):
    env['CCFLAGS'] += ['-DMIR_MEM_POL_ENABLE']

if os.path.isfile('HAVE_PAPI'):
    env['CCFLAGS'] += ['-I' + PAPI_ROOT+'/include']

#####################
# Debug environment #
#####################

debug = env.Clone();
debug['CCFLAGS'] += Split("""
-O0
-g
-ggdb
-DMIR_ENABLE_DEBUG
""")
debug.VariantDir('debug-build', '.', duplicate=0)
debug_src = debug.Glob('debug-build/*.c')
debug_src += debug.Glob('debug-build/arch/*.c')
debug_src += debug.Glob('debug-build/scheduling/*.c')
debug.Library(target = 'mir-debug', source = debug_src)

###################
# Opt environment #
###################

opt = env.Clone();
opt['CCFLAGS'] += ['-O2']
opt.VariantDir('opt-build', '.', duplicate=0)
opt_src = opt.Glob('opt-build/*.c')
opt_src += opt.Glob('opt-build/arch/*.c')
opt_src += opt.Glob('opt-build/scheduling/*.c')
opt.Library('mir-opt', source = opt_src)
