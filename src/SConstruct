######################
# Common environment #
######################

import os
import sys

def versiontuple(v):
    return tuple(map(int, (v.split("."))))

MIR_ROOT = os.environ.get('MIR_ROOT')
if(MIR_ROOT == None):
    # Use the parent directory of the directory this SConstruct resides in.
    this_sconscript_file = (lambda x:x).func_code.co_filename
    MIR_ROOT=File(this_sconscript_file).Dir("..").abspath

sys.path.append(MIR_ROOT + '/scripts')
import mir_utils

# Check for PAPI support
if os.path.isfile('HAVE_PAPI'):
    PAPI_ROOT = os.environ.get('PAPI_ROOT')
    if(PAPI_ROOT == None):
        if os.path.isfile('/usr/include/papi.h'):
            print('PAPI_ROOT not defined. Using /usr as PAPI_ROOT.')
            PAPI_ROOT="/usr"
        else:
            print('PAPI_ROOT is not defined and papi.h can not be found. Aborting!')
            Exit(2)

# Choose compiler
# Note: OpenMP support only enabled for GCC. 
compilers = ['gcc']
compiler = ''
for item in compilers:
    compiler = mir_utils.which(item)
    if(len(compiler) > 0):
        break;
if(len(compiler) == 0):
    print('Could not find a compiler. Aborting!')
    Exit(2)

# Base environment
env = Environment()
env['CC'] = [compiler[0]]
# -D_XOPEN_SOURCE=600 needed for exposing pthread_barrier_t on recent Linux.
env['CCFLAGS'] = Split("""
-Wall 
-Werror 
-Wno-unused-function 
-Wno-unused-variable 
-Wno-unused-label
-fPIC 
-std=c99 
-D_GNU_SOURCE
-D_XOPEN_SOURCE=600
""")

env['CCFLAGS'] += ['-I' + MIR_ROOT+'/src']

# Enable libnuma usage
if os.path.isfile('HAVE_LIBNUMA'):
    env['CCFLAGS'] += ['-DMIR_MEM_POL_ENABLE']

# Enable PAPI usage
if os.path.isfile('HAVE_PAPI'):
    env['CCFLAGS'] += ['-I' + PAPI_ROOT+'/include']
    env['CCFLAGS'] += ['-DMIR_RECORDER_USE_HW_PERF_COUNTERS']

# Enable specialized support for GCC OpenMP Pre-4.9.0.
import commands
compiler_version = commands.getoutput(str(env['CC']).strip('[]') + ' -dumpversion')
compiler_name = commands.getoutput(str(env['CC']).strip('[]') + ' --version')
if versiontuple(compiler_version) < versiontuple("4.9.0") and compiler_name.startswith("gcc"):
    print('Enabling GCC Pre-4.9.0 OpenMP support')
    env['CCFLAGS'] += ['-DGCC_PRE_4_9']

# Detect topology
# FIXME: This runs every time rather than only when sources have changed.
if not env.GetOption('clean'):
    print('Detecting topology ... [foolproof, runs each time irrespective of build state.]')
    if(0 != os.system('MIR_ROOT=' + MIR_ROOT +' Rscript ' + MIR_ROOT +'/scripts/detect_arch.R')):
        print('Could not detect topology. Build cannot continue!')
        Exit(2)

    #if not os.path.isfile('arch/mir_arch_this.c'):
    # FIXME: This runs every time rather than only when sources have changed.
    print('Generating generic architecture description ...')
    if(0 != os.system(MIR_ROOT+'/scripts/generate_arch.py '+MIR_ROOT+'/src/arch')):
        print('Could not generate generic architecture description. Build cannot continue!')
        Exit(2)

    #if not os.path.isfile('mir_lib_int.h'):
    # FIXME: This runs every time rather than only when sources have changed.
    print('Generating library interface ...')
    if(0 != os.system(MIR_ROOT+'/src/generate_public_int.sh '+MIR_ROOT+'/src')):
        print('Could not generate library interface. Build cannot continue!')
        Exit(2)

#####################
# Debug environment #
#####################

debug = env.Clone();
debug['CCFLAGS'] += Split("""
-O0
-g
-ggdb
-DMIR_ENABLE_DEBUG
""")
debug.VariantDir('debug-build', MIR_ROOT+'/src', duplicate=0)
debug_src = debug.Glob('debug-build/*.c')
debug_src += debug.Glob('debug-build/arch/*.c')
debug_src += debug.Glob('debug-build/scheduling/*.c')
debug.Library(target = 'mir-debug', source = debug_src)

###################
# Opt environment #
###################

opt = env.Clone();
opt['CCFLAGS'] += ['-O2']
opt.VariantDir('opt-build', MIR_ROOT+'/src', duplicate=0)
opt_src = opt.Glob('opt-build/*.c')
opt_src += opt.Glob('opt-build/arch/*.c')
opt_src += opt.Glob('opt-build/scheduling/*.c')
opt.Library(target = 'mir-opt', source = opt_src)

###################
# Prof environment #
###################

prof = env.Clone();
prof['CCFLAGS'] += ['-O2']
prof['CCFLAGS'] += ['-finstrument-functions']
prof.VariantDir('prof-build', MIR_ROOT+'/src', duplicate=0)
prof_src = prof.Glob('prof-build/*.c')
prof_src += prof.Glob('prof-build/arch/*.c')
prof_src += prof.Glob('prof-build/scheduling/*.c')
prof.Library(target = 'mir-prof', source = prof_src)
