import sys
import os

# Get paths
this_sconscript_file = (lambda x:x).func_code.co_filename

MIR_ROOT = os.environ.get('MIR_ROOT')
if(MIR_ROOT == None):
    # Use the parent directory of the directory this SConstruct resides in.
    MIR_ROOT=File(this_sconscript_file).Dir("../").abspath

if os.path.isfile(MIR_ROOT+'/src/HAVE_PAPI'):
    PAPI_ROOT = os.environ.get('PAPI_ROOT')
    if(PAPI_ROOT == None):
        if os.path.isfile('/usr/include/papi.h'):
            print('PAPI_ROOT not defined. Using /usr as PAPI_ROOT.')
            PAPI_ROOT="/usr"
        else:
            print('PAPI_ROOT is not defined and papi.h can not be found. Aborting!')
            Exit(2)

# Define base environment

env = Environment()
env['CC'] = ['gcc']
env['CCFLAGS'] = Split("""
-std=c99
-Wall
-Werror
-Wno-unused-function
-Wno-unused-variable
-Wno-unused-but-set-variable
-Wno-maybe-uninitialized
-fopenmp
-DLINUX
-D_XOPEN_SOURCE=600
""")
env['CCFLAGS'] += ['-I' + MIR_ROOT +'/src']
env['LINKFLAGS'] = ['-pthread']
env['LIBS'] = Split("""
m
check
rt
subunit
""")

env['LIBPATH'] = [MIR_ROOT + '/src']

if os.path.isfile(MIR_ROOT+'/src/HAVE_LIBNUMA'):
    env['LIBS'] += ['numa']
    env['CCFLAGS'] += ['-DMIR_MEM_POL_ENABLE']

if os.path.isfile(MIR_ROOT+'/src/HAVE_PAPI'):
    env['LIBS'] += ['papi']
    env['LIBPATH'] += [PAPI_ROOT + '/lib']

# Define debug environment

debug = env.Clone();
debug['CCFLAGS'] += Split("""
-O0
-g
-ggdb
-fdump-tree-optimized
""")
debug.Prepend(LIBS = ['mir-debug'])

# Define opt environment

opt = env.Clone();
opt['CCFLAGS'] += Split("""
-O3
-g
-fdump-tree-optimized
""")
opt.Prepend(LIBS = ['mir-opt'])

# Export environments
Export('opt','debug')

# Register native build scripts
SConscript(os.path.join('fib_native', 'SConscript'))

# Conditionally register OpenMP build scripts.
if os.path.isfile(MIR_ROOT+'/src/mir_omp_int.c'):
    SConscript(os.path.join('omp_parallel', 'SConscript'))
    SConscript(os.path.join('omp_single', 'SConscript'))
    SConscript(os.path.join('omp_critical', 'SConscript'))
    SConscript(os.path.join('omp_atomic', 'SConscript'))
    SConscript(os.path.join('omp_for', 'SConscript'))
    SConscript(os.path.join('omp_barrier', 'SConscript'))
    SConscript(os.path.join('fib_omp', 'SConscript'))
